---
import '../styles/global.css';
---

<head>
  <meta charset="UTF-8" />
  <title>Los Santos Customs - Panel Mecánico</title>
  <link rel="icon" href="/media/PagePhotos/LogoIcon.ico" type="image/x-icon" />
  <link rel="shortcut icon" href="/media/PagePhotos/LogoIcon.ico" type="image/x-icon" />
</head>

<div class="min-h-screen bg-gray-100">
  <!-- Navbar -->
  <nav class="bg-gradient-to-r from-indigo-600 via-purple-600 to-indigo-500 shadow-lg">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        <div class="flex items-center">
          <img src="/media/PagePhotos/Logo.webp" alt="Los Santos Customs Logo" class="h-10 w-auto" />
          <span class="ml-4 text-white font-bold text-xl">Panel Mecánico</span>
        </div>
        <div class="flex items-center">
          <button id="logoutBtn" class="text-white hover:text-gray-200 px-3 py-2 rounded-md text-sm font-medium">
            Cerrar Sesión
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <!-- Action Buttons -->
    <div class="mb-6 flex justify-between items-center">
      <h1 class="text-2xl font-semibold text-gray-900">Gestión de Vehículos</h1>
      <button id="addVehicleBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors">
        Agregar Vehículo
      </button>
    </div>

    <!-- Vehicle List -->
    <div class="bg-white shadow rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Patente</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cliente</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha Ingreso</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
              </tr>
            </thead>
            <tbody id="vehicleList" class="bg-white divide-y divide-gray-200">
              <!-- Vehicle rows will be dynamically added here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Sección de Mecánicos (solo visible para admin) -->
    <div id="mechanicsSection" class="hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Gestión de Mecánicos</h2>
        <button id="addMechanicBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">
          Agregar Mecánico
        </button>
      </div>

      <div class="bg-white rounded-lg shadow overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">RUT</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rol</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
            </tr>
          </thead>
          <tbody id="mechanicsList" class="bg-white divide-y divide-gray-200">
            <!-- Los mecánicos se cargarán aquí dinámicamente -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Add/Edit Vehicle Modal -->
  <div id="vehicleModal" class="modal-hidden fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
    <div class="bg-white p-8 rounded-lg shadow-xl w-[800px] transform transition-all duration-200 scale-95 opacity-0" id="vehicleModalContent">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800" id="modalTitle">Agregar Vehículo</h2>
        <button type="button" data-modal-close="vehicleModal" class="text-indigo-400 hover:text-indigo-700 transition-colors p-2 hover:bg-indigo-100 rounded-full">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <form id="vehicleForm" class="space-y-6">
        <div class="grid grid-cols-2 gap-6">
          <!-- Cliente Info -->
          <div class="space-y-4">
            <h3 class="text-lg font-semibold text-gray-700">Información del Cliente</h3>
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">RUT</label>
              <input type="text" name="rut" required
                     class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                     placeholder="Ingrese RUT del cliente">
            </div>
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Nombre</label>
              <input type="text" name="nombre" required
                     class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                     placeholder="Ingrese nombre del cliente">
            </div>
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Teléfono</label>
              <input type="tel" name="telefono" required
                     class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                     placeholder="Ingrese teléfono del cliente">
            </div>
          </div>

          <!-- Vehículo Info -->
          <div class="space-y-4">
            <h3 class="text-lg font-semibold text-gray-700">Información del Vehículo</h3>
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Patente</label>
              <input type="text" name="patente" required pattern="^[A-Z]{2}-[A-Z]{2}-[0-9]{2}$"
                     class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                     placeholder="Ingrese patente del vehículo">
            </div>
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Marca</label>
              <input type="text" name="marca" required
                     class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                     placeholder="Ingrese marca del vehículo">
            </div>
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Modelo</label>
              <input type="text" name="modelo" required
                     class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                     placeholder="Ingrese modelo del vehículo">
            </div>
          </div>
        </div>

        <!-- Estado y Observaciones -->
        <div class="space-y-4">
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700">Estado</label>
            <select name="estado" required
                    class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200">
              <option value="En espera">En espera</option>
              <option value="En revisión">En revisión</option>
              <option value="En reparación">En reparación</option>
              <option value="Listo para entrega">Listo para entrega</option>
              <option value="Entregado">Entregado</option>
            </select>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700">Observaciones</label>
            <textarea name="observaciones" rows="3"
                      class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
                      placeholder="Ingrese observaciones sobre el vehículo"></textarea>
          </div>
        </div>

        <!-- Imágenes -->
        <div class="space-y-4">
          <label class="block text-sm font-medium text-gray-700">Imágenes del Vehículo</label>
          <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg">
            <div class="space-y-1 text-center">
              <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              <div class="flex text-sm text-gray-600">
                <label for="file-upload" class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500">
                  <span>Subir imágenes</span>
                  <input id="file-upload" name="file-upload" type="file" class="sr-only" multiple accept="image/*">
                </label>
                <p class="pl-1">o arrastrar y soltar</p>
              </div>
              <p class="text-xs text-gray-500">PNG, JPG, GIF hasta 10MB</p>
            </div>
          </div>
          <div id="imagePreview" class="grid grid-cols-4 gap-4 mt-4">
            <!-- Image previews will be added here -->
          </div>
        </div>

        <div class="flex justify-end">
          <button type="submit" 
                  class="w-full px-6 py-3 text-sm font-medium text-white bg-gradient-to-r from-indigo-600 via-purple-600 to-indigo-700 hover:from-purple-700 hover:to-indigo-800 rounded-lg transition-all duration-150 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
            Guardar Vehículo
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Modal para agregar/editar mecánico -->
  <div id="mechanicModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Agregar Mecánico</h3>
        <form id="mechanicForm" class="mt-4">
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="rut">
              RUT
            </label>
            <input type="text" id="rut" name="rut" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="nombre">
              Nombre
            </label>
            <input type="text" id="nombre" name="nombre" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="pin">
              PIN
            </label>
            <input type="password" id="pin" name="pin" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="rol">
              Rol
            </label>
            <select id="rol" name="rol" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
              <option value="mecanico">Mecánico</option>
              <option value="admin">Administrador</option>
            </select>
          </div>
          <div class="flex justify-end gap-2">
            <button type="button" id="cancelMechanicBtn"
              class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-lg">
              Cancelar
            </button>
            <button type="submit"
              class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
  .modal-hidden {
    display: none;
  }

  #vehicleModal:not(.modal-hidden) {
    animation: modalFadeIn 0.18s cubic-bezier(0.4,0,0.2,1);
  }

  @keyframes modalFadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  #vehicleModalContent {
    transition: transform 0.18s cubic-bezier(0.4,0,0.2,1), opacity 0.18s cubic-bezier(0.4,0,0.2,1);
  }
</style>

<script>
  import { VehicleManager } from '../scripts/vehicles';
  
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('Página de mecánicos cargada');
    
    // Check authentication
    const token = localStorage.getItem('mechanicToken');
    console.log('Token encontrado:', !!token);
    
    if (!token) {
      console.log('No hay token, redirigiendo a inicio');
      window.location.replace('/');
      return;
    }

    try {
      console.log('Verificando token...');
      // Verificar que el token es válido
      const response = await fetch('/api/auth/verify', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      console.log('Respuesta de verificación:', response.status);
      
      if (!response.ok) {
        console.log('Token inválido, redirigiendo a inicio');
        // Si el token no es válido, limpiar y redirigir
        localStorage.removeItem('mechanicToken');
        localStorage.removeItem('mechanicData');
        window.location.replace('/');
        return;
      }

      const data = await response.json();
      console.log('Token verificado, datos del mecánico:', data);

      // Configurar el botón de cerrar sesión
      const logoutBtn = document.getElementById('logoutBtn');
      if (logoutBtn) {
        logoutBtn.addEventListener('click', () => {
          localStorage.removeItem('mechanicToken');
          localStorage.removeItem('mechanicData');
          window.location.replace('/');
        });
      }

      // Inicializar el gestor de vehículos
      console.log('Inicializando gestor de vehículos...');
      const vehicleManager = VehicleManager.getInstance();
      await vehicleManager.loadVehicles();

      // Verificar si el usuario es admin y mostrar la sección de mecánicos
      console.log('Verificando rol de admin:', data.rol);
      const mechanicsSection = document.getElementById('mechanicsSection');
      if (data.rol === 'admin' && mechanicsSection) {
        console.log('Mostrando sección de mecánicos');
        mechanicsSection.classList.remove('hidden');
        await loadMechanics();
      } else {
        console.log('Usuario no es admin o no se encontró la sección de mecánicos');
      }
    } catch (error) {
      console.error('Error verificando autenticación:', error);
      localStorage.removeItem('mechanicToken');
      localStorage.removeItem('mechanicData');
      window.location.replace('/');
    }
  });

  // Cargar mecánicos
  async function loadMechanics() {
    const token = localStorage.getItem('mechanicToken');
    if (!token) return;
    
    try {
      const response = await fetch('/api/mecanicos', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error('Error al cargar mecánicos');
      }

      const mechanics = await response.json();
      const mechanicsList = document.getElementById('mechanicsList');
      if (mechanicsList) {
        mechanicsList.innerHTML = mechanics.map((mechanic: { nombre: string; rut: string; rol: string; id: number }) => `
          <tr>
            <td class="px-6 py-4 whitespace-nowrap">${mechanic.nombre}</td>
            <td class="px-6 py-4 whitespace-nowrap">${mechanic.rut}</td>
            <td class="px-6 py-4 whitespace-nowrap">${mechanic.rol}</td>
            <td class="px-6 py-4 whitespace-nowrap">
              <button onclick="deleteMechanic(${mechanic.id})" 
                class="text-red-600 hover:text-red-900">
                Eliminar
              </button>
            </td>
          </tr>
        `).join('');
      }
    } catch (error) {
      console.error('Error al cargar mecánicos:', error);
    }
  }

  // Manejar el modal de mecánicos
  const mechanicModal = document.getElementById('mechanicModal');
  const addMechanicBtn = document.getElementById('addMechanicBtn');
  const cancelMechanicBtn = document.getElementById('cancelMechanicBtn');
  const mechanicForm = document.getElementById('mechanicForm');

  if (addMechanicBtn && mechanicModal && cancelMechanicBtn && mechanicForm) {
    addMechanicBtn.addEventListener('click', () => {
      mechanicModal.classList.remove('hidden');
    });

    cancelMechanicBtn.addEventListener('click', () => {
      mechanicModal.classList.add('hidden');
      (mechanicForm as HTMLFormElement).reset();
    });

    mechanicForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const token = localStorage.getItem('mechanicToken');
      if (!token) return;
      
      const formData = new FormData(mechanicForm as HTMLFormElement);
      const mechanicData = {
        rut: formData.get('rut'),
        nombre: formData.get('nombre'),
        pin: formData.get('pin'),
        rol: formData.get('rol')
      };

      try {
        const response = await fetch('/api/mecanicos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(mechanicData)
        });

        if (!response.ok) {
          throw new Error('Error al agregar mecánico');
        }

        mechanicModal.classList.add('hidden');
        (mechanicForm as HTMLFormElement).reset();
        await loadMechanics();
      } catch (error) {
        console.error('Error al agregar mecánico:', error);
        alert('Error al agregar mecánico');
      }
    });
  }

  // Función para eliminar mecánico
  (window as any).deleteMechanic = async (id: number) => {
    const token = localStorage.getItem('mechanicToken');
    if (!token) return;
    
    if (confirm('¿Estás seguro de que deseas eliminar este mecánico?')) {
      try {
        const response = await fetch(`/api/mecanicos/${id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (!response.ok) {
          throw new Error('Error al eliminar mecánico');
        }

        await loadMechanics();
      } catch (error) {
        console.error('Error al eliminar mecánico:', error);
        alert('Error al eliminar mecánico');
      }
    }
  };
</script> 